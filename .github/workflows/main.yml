name: SonarQube Quality Gate Check

on:
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  sonarqube-quality-gate:
    name: SonarQube Quality Gate Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14.x'

      - name: Install dependencies
        run: npm install

      # Run SonarQube analysis
      - name: SonarQube Analysis
        id: sonarqube_scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # Check the Quality Gate status.
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        run: |
          # Guardar la URL del reporte del an√°lisis en una variable
          report_url=$(cat .scannerwork/report-task.txt)

          # Realizar la solicitud al servidor de SonarQube para obtener el estado del Quality Gate
          quality_gate_status=$(curl -s -u "${SONAR_TOKEN}": "${SONAR_HOST_URL}/api/qualitygates/project_status" -d "projectKey=Spuchifai" -d "analysisId=${report_url}" | jq -r '.projectStatus.status')

          # Mostrar el estado del Quality Gate
          echo "Quality Gate status is: $quality_gate_status"

          # Evaluar si el estado es "ERROR" o "NONE" para fallar en caso de ser necesario
          if [ "$quality_gate_status" == "ERROR" ] || [ "$quality_gate_status" == "NONE" ]; then
            echo "Quality Gate failed or not set, failing the step..."
            exit 1
          fi
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
