on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - master

name: Detalle An√°lisis SonarQube

jobs:
  sonarqube:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Get SonarQube Quality Gate Status
        id: sonarqube_status
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          curl -X GET -u "${SONAR_TOKEN}": -o sonarqube.json '${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=Spuchifai'
          echo "::set-output name=sonarqube_status::$(cat sonarqube.json)"

      - name: Get SonarQube Measures
        id: sonarqube_measures
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          curl -X GET -u "${SONAR_TOKEN}": -o sonarqube_measures.json '${{ secrets.SONAR_HOST_URL }}/api/measures/component_tree?additionalFields=metrics&ps=500&asc=false&metricSort=new_duplicated_lines_density&s=metricPeriod&metricSortFilter=withMeasuresOnly&metricPeriodSort=1&component=Spuchifai&metricKeys=new_duplicated_lines_density,new_line_coverage,code_smells,new_bugs,new_vulnerabilities,new_security_hotspots_reviewed&strategy=leaves'
          echo "::set-output name=sonarqube_measures::$(cat sonarqube_measures.json)"

      - name: Comment PR
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            Detalle del An√°lisis de SonarQube:

            Estado del An√°lisis de SonarQube: ${{ fromJson(steps.sonarqube_status.outputs.sonarqube_status).projectStatus.status == 'OK' && '‚úÖ Exitoso' || '‚ùå Fallido' }}

            Condiciones:
              - M√©trica: Nuevo √çndice de Fiabilidad
                Estado: ${{ steps.run_script.outputs.fallback || '‚úÖ Exitoso' }}
                Umbral de Error: ${{ steps.run_script.outputs.run_result.measures[0].period.bestValue }} (Cuanto menor es mejor)
                Valor Actual: ${{ steps.run_script.outputs.run_result.measures[0].period.value }}%

              - M√©trica: Nuevo √çndice de Seguridad
                Estado: ${{ steps.run_script.outputs.run_result.measures[1].period.bestValue || '‚úÖ Exitoso' }}
                Umbral de Error: ${{ steps.run_script.outputs.run_result.measures[1].period.bestValue }} (Cuanto menor es mejor)
                Valor Actual: ${{ steps.run_script.outputs.run_result.measures[1].period.value }}%

              - M√©trica: Nuevo √çndice de Mantenibilidad
                Estado: ${{ steps.run_script.outputs.run_result.measures[2].period.bestValue || '‚úÖ Exitoso' }}
                Umbral de Error: ${{ steps.run_script.outputs.run_result.measures[2].period.bestValue }} (Cuanto menor es mejor)
                Valor Actual: ${{ steps.run_script.outputs.run_result.measures[2].period.value }}%

              - M√©trica: Nueva Densidad de L√≠neas Duplicadas
                Estado: ${{ steps.run_script.outputs.run_result.measures[3].period.bestValue || '‚úÖ Exitoso' }}
                Umbral de Error: ${{ steps.run_script.outputs.run_result.measures[3].period.bestValue }} (Cuanto menor es mejor)
                Valor Actual: ${{ steps.run_script.outputs.run_result.measures[3].period.value }}%

            Detalles de las M√©tricas:
${{ steps.run_script.outputs.run_result.details }}
      - name: Run Script
        id: run_script
        run: |
          sonarqube_measures=$(cat sonarqube_measures.json)
          status=$(cat sonarqube.json)
          mapfile -t component_names < <(jq -r '.components[].name' <<< "$sonarqube_measures")
          mapfile -t component_paths < <(jq -r '.components[].path' <<< "$sonarqube_measures")
          mapfile -t measures < <(jq -r '.components[].measures | map({ metric, period })' <<< "$sonarqube_measures")

          details=""
          for i in "${!component_names[@]}"; do
            detail="- Componente: ${component_names[i]} (${component_paths[i]}):"
            for measure in "${measures[i]}"; do
              metric=$(jq -r '.metric' <<< "$measure")
              bestValue=$(jq -r '.period.bestValue' <<< "$measure")
              value=$(jq -r '.period.value' <<< "$measure")
              detail="$detail\n  - M√©trica: $metric"
              detail="$detail\n    Estado: $value%$([[ $bestValue == 'true' ]] && echo ' (mejor valor)' || echo ' (peor valor)')"
              detail="$detail\n    üìù Cantidad de L√≠neas Cubiertas: $(jq -r '.value' <<< "$measure")"
            done
            details="$details$detail\n"
          done

          echo "::set-output name=fallback::‚úÖ Exitoso"
          echo "::set-output name=run_result::$(jq -n --argjson details "$details" "$sonarqube_measures")"

      - name: Check SonarQube Analysis Status
        if: steps.sonarqube_status.outputs.sonarqube_status != 'undefined' && fromJson(steps.sonarqube_status.outputs.sonarqube_status).projectStatus.status == 'ERROR'
        run: exit 1

      - name: Block PR on SonarQube Analysis Failure
        if: steps.sonarqube_status.outputs.sonarqube_status != 'undefined' && fromJson(steps.sonarqube_status.outputs.sonarqube_status).projectStatus.status == 'ERROR'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "The SonarQube analysis failed. Blocking the PR..."
          pr_number="${{ github.event.pull_request.number }}"
          owner="${{ github.repository_owner }}"
          repo="${{ github.repository }}"
          response=$(curl -X POST -v \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$owner/$repo/issues/$pr_number/lock" 2>&1)
          echo "$response"
