name: Main Workflow

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - master

jobs:
  sonarqube:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Get SonarQube Quality Gate Status
        id: sonarqube_status
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          curl -X GET -u "${SONAR_TOKEN}": -o quality-gate.json '${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=Spuchifai'
          echo "::set-output name=status::$(cat quality-gate.json)"

      - name: Get SonarQube Measures
        id: sonarqube_measures
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          curl -X GET -u "${SONAR_TOKEN}": -o sonarqube_measures.json '${{ secrets.SONAR_HOST_URL }}/api/measures/component_tree?additionalFields=metrics&ps=500&asc=false&metricSort=new_duplicated_lines_density&s=metricPeriod&metricSortFilter=withMeasuresOnly&metricPeriodSort=1&component=${{secrets.SONAR_PROJECT_KEY}}&metricKeys=new_duplicated_lines_density,new_line_coverage,code_smells,new_bugs,new_vulnerabilities,new_security_hotspots_reviewed&strategy=leaves'
          echo "::set-output name=measures::$(cat sonarqube_measures.json)"

      - name: Format and Comment PR
        id: format_and_comment
        env:
          MEASURES_JSON: ${{ steps.sonarqube_measures.outputs.measures }}
        run: |
          metrics=$(echo $MEASURES_JSON | jq -r '.metrics')
          components=$(echo $MEASURES_JSON | jq -r '.components')

          # Define icons for metrics
          declare -A metricIcons=(
            ["code_smells"]="‚ùó"
            ["new_bugs"]="üêû"
            ["new_duplicated_lines_density"]="üìã"
            ["new_line_coverage"]="üìä"
            ["new_security_hotspots_reviewed"]="üîí"
            ["new_vulnerabilities"]="‚ö†Ô∏è"
          )

          # Function to get the icon for a metric
          getMetricIcon() {
            metric="$1"
            icon="${metricIcons[$metric]}"
            echo "$icon"
          }

          # Function to format a measure entry
          formatMeasureEntry() {
            metric="$1"
            value="$2"
            icon=$(getMetricIcon "$metric")
            echo "  - M√©trica: $metric $icon"
            echo "    Valor: $value"
          }

          # Function to process measures for each component
          processMeasures() {
            componentMeasures="$1"
            for entry in $(echo "$componentMeasures" | jq -r '.[] | @base64'); do
              _jq() {
                echo ${entry} | base64 --decode | jq -r ${1}
              }

              metric=$(_jq '.metric')
              value=$(_jq '.value')
              formattedEntry=$(formatMeasureEntry "$metric" "$value")
              echo "$formattedEntry"
            done
          }

          # Process measures for each component and store in a variable
          formattedMetrics=""
          for component in $(echo "$components" | jq -r '.[] | @base64'); do
            _jq() {
              echo ${component} | base64 --decode | jq -r ${1}
            }

            componentName=$(_jq '.name')
            formattedMetrics+="Componente: $componentName"$'\n'
            componentMeasures=$(_jq '.measures')
            processedMeasures=$(processMeasures "$componentMeasures")
            formattedMetrics+="$processedMeasures"$'\n'
          done

          # Prepare the comment message
          comment_message="Estado del An√°lisis de SonarQube: ${{ fromJson(steps.sonarqube_status.outputs.status).projectStatus.status == 'OK' && '‚úÖ Exitoso' || '‚ùå Fallido' }}"
          comment_message+="\nCondiciones:"
          # ... Include the rest of the original comment content here ...
          comment_message+="\nMedidas SonarQube:\n$formattedMetrics"

          # Comment the PR with the message
          echo "$comment_message" | gh pr comment ${{ github.event.number }}
