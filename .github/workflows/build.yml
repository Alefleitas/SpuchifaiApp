on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - master

name: Detalle Análisis SonarQube

jobs:
  sonarqube:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Get SonarQube Quality Gate Status
        id: sonarqube_status
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          curl -X GET -u "${SONAR_TOKEN}": -o quality-gate.json '${{ secrets.SONAR_HOST_URL }}/api/measures/component_tree?additionalFields=metrics&ps=500&asc=false&metricSort=new_duplicated_lines_density&s=metricPeriod&metricSortFilter=withMeasuresOnly&metricPeriodSort=1&component=Spuchifai&metricKeys=new_duplicated_lines_density,new_line_coverage,code_smells,new_bugs,new_vulnerabilities,new_security_hotspots_reviewed&strategy=leaves'
          echo "::set-output name=status::$(cat quality-gate.json)"

      - name: Comment PR with SonarQube Measures
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          const data = ${{fromJson(env.sonarqube_measures)}};
          if (!data || !data.components) {
            echo "No SonarQube measures found."
            return
          }

          let comment = 'SonarQube Analysis Metrics:\n\n';

          data.components.forEach(component => {
            comment += `- File: ${component.name}\n`;
            component.measures.forEach(measure => {
              let icon = '';
              switch (measure.metric) {
                case 'new_duplicated_lines_density':
                  icon = '📊';
                  break;
                case 'code_smells':
                  icon = '💡';
                  break;
                case 'new_bugs':
                  icon = '🐞';
                  break;
                case 'new_vulnerabilities':
                  icon = '🛡️';
                  break;
                // Add more cases for other metrics if needed
                default:
                  icon = '';
              }
              comment += `  ${icon} ${measure.metric}: ${measure.period.value}\n`;
            });
            comment += '\n';
          });

          echo "$comment"  # Show comment in the console

          curl -X POST -H "Authorization: Bearer $GITHUB_TOKEN" -H "Content-Type: application/json" -d "{\"body\":\"$comment\"}" "https://api.github.com/repos/${GITHUB_REPOSITORY}/issues/${{ github.event.pull_request.number }}/comments"


      - name: Check SonarQube Analysis Status
        if: steps.sonarqube_status.outputs.status != 'undefined' && fromJson(steps.sonarqube_status.outputs.status).components[0].measures.length == 0
        run: exit 1

      - name: Block PR on SonarQube Analysis Failure
        if: steps.sonarqube_status.outputs.status != 'undefined' && fromJson(steps.sonarqube_status.outputs.status).components[0].measures.length == 0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "El análisis de SonarQube ha fallado. Bloqueando la PR..."
          pr_number="${{ github.event.pull_request.number }}"
          owner="${{ github.repository_owner }}"
          repo="${{ github.repository }}"
          response=$(curl -X POST -v \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$owner/$repo/issues/$pr_number/lock" 2>&1)
          echo "$response"
